73475/9
16629/3
73475/3
nrow(new_data)
73547/9
# set working directory
setwd("/Users/shengwong/Documents/GitHub/Fall2018-Proj1-wsan5277yyyy/output")
# Install and load libraries
packages.used=c("tm", "wordcloud", "RColorBrewer", "dplyr", "tydytext",
"tidyverse","DT","scales","wordcloud2","gridExtra",
"ngram","tidyr","janeaustenr","wordcloud","igraph","ggraph","syuzhet")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tidytext)
library(tidyverse)
library(DT)
library(scales)
library(wordcloud2)
library(gridExtra)
library(ngram)
library(tidyr)
library(janeaustenr)
library(wordcloud)
library(igraph)
library(ggraph)
library(syuzhet)
# Load the processed text data along with demographic information on contributors
hm_data <- read_csv("../output/processed_moments.csv")
urlfile<-'https://raw.githubusercontent.com/rit-public/HappyDB/master/happydb/data/demographic.csv'
demo_data <- read_csv(urlfile)
# Combine both the data sets and keep the required columns for analysis
hm_data <- hm_data %>%
inner_join(demo_data, by = "wid") %>%
select(wid,
original_hm,
cleaned_hm,
gender,
marital,
parenthood,
reflection_period,
age,
country,
ground_truth_category,
text,
predicted_category) %>%
mutate(count = sapply(hm_data$text, wordcount)) %>%
filter(gender %in% c("m", "f")) %>%
filter(marital %in% c("single", "married")) %>%
filter(parenthood %in% c("n", "y")) %>%
filter(reflection_period %in% c("24h", "3m")) %>%
mutate(reflection_period = fct_recode(reflection_period,
months_3 = "3m", hours_24 = "24h"))
# Sort hm_data by country "USA", then divide them by four generation groups
hm_data$age <- as.integer(hm_data$age)
new_data <- hm_data[-which(is.na(hm_data$age)),]
new_data <- new_data[new_data$country=="USA",]
new_data$words <- sapply(strsplit(new_data$cleaned_hm, " "), length)
new_data1 <- new_data[new_data$words <= 50,]
group1 <-new_data1[which(new_data1$age >=17 & new_data1$age <= 37),]
group1$group <- "Millennial"
group2 <-new_data1[which(new_data1$age >=38 & new_data1$age <= 53),]
group2$group <- "Gen X"
group3 <-new_data1[which(new_data1$age >=54 & new_data1$age <= 72),]
group3$group <- "Baby Boomer"
group4 <-new_data1[which(new_data1$age >=73 & new_data1$age <= 93),]
group4$group <- "Silent"
group_boxplot <- rbind(group1,group2,group3,group4)
group_boxplot$group <- factor(group_boxplot$group, levels = c("Millennial","Gen X","Baby Boomer","Silent"))
ggplot(group_boxplot, aes(x=group, y=words, color=group)) +
geom_boxplot()
# regroup our generation Groups
Millennial <- new_data %>%
select(wid, cleaned_hm, gender, age, text,count,predicted_category) %>%
filter(age>=17 & age<=37)%>%
mutate(group="Millennial")
Gen_X <- new_data %>%
select(wid, cleaned_hm, gender, age, text,count,predicted_category) %>%
filter(age>=38 & age<=53)%>%
mutate(group="Gen X")
Baby_Boomer <- new_data %>%
select(wid, cleaned_hm, gender, age, text,count,predicted_category) %>%
filter(age>=54 & age<=72)%>%
mutate(group = "Baby Boomer")
Silent <- new_data %>%
select(wid, cleaned_hm, gender, age, text,count,predicted_category) %>%
filter(age>=73 & age <=93)%>%
mutate(group = "Silent")
# Millennial group's word cloud
tidy_M <- Millennial %>%
unnest_tokens(word, text)
freq_M <- tidy_M %>%
count(word, sort = TRUE)
wordcloud(freq_M$word,freq_M$n,
scale=c(5,0.2),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9, "Accent"))
# Gen X group's word cloud
tidy_G <- Gen_X %>%
unnest_tokens(word, text)
freq_G <- tidy_G %>%
count(word, sort = TRUE)
wordcloud(freq_G$word,freq_G$n,
scale=c(4,0.2),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9, "Accent"))
# Baby Boomer group's word cloud
tidy_B <- Baby_Boomer %>%
unnest_tokens(word, text)
freq_B <- tidy_B %>%
count(word, sort = TRUE)
wordcloud(freq_B$word,freq_B$n,
scale=c(4,0.2),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9, "Accent"))
# Silent group's word cloud
tidy_S <- Silent %>%
unnest_tokens(word, text)
freq_S <- tidy_S %>%
count(word, sort = TRUE)
wordcloud(freq_S$word,freq_S$n,
scale=c(4,0.2),
max.words=100,
min.freq=1,
random.order=FALSE,
rot.per=0.3,
use.r.layout=T,
random.color=FALSE,
colors=brewer.pal(9, "Accent"))
# Reshape Millennial group
# tokenized by pairs of two consecutive words
M_bigrams <- Millennial %>%
filter(count != 1) %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2)
# most common bigrams
M_counts <- M_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
count(word1, word2, sort = TRUE)
# work with the recombined words
M_united <- M_counts %>%
unite(bigram, word1, word2, sep = " ")
M_united$group <- "Millennial"
# Reshape Gen_X group
G_bigrams <- Gen_X %>%
filter(count != 1) %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2)
G_counts <- G_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
count(word1, word2, sort = TRUE)
G_united <- G_counts %>%
unite(bigram, word1, word2, sep = " ")
G_united$group <- "Gen X"
# Reshape Baby Boomer group
B_bigrams <- Baby_Boomer %>%
filter(count != 1) %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2)
B_counts <- B_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
count(word1, word2, sort = TRUE)
B_united <- B_counts %>%
unite(bigram, word1, word2, sep = " ")
B_united$group <- "Baby Boomer"
# Reshape Silent group
S_bigrams <- Silent %>%
filter(count != 1) %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2)
S_counts <- S_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
count(word1, word2, sort = TRUE)
S_united <- S_counts %>%
unite(bigram, word1, word2, sep = " ")
S_united$group <- "Silent"
# Analyzing bigrams for Millennial group
M_united %>%
arrange(desc(n)) %>%
mutate(word = factor(bigram, levels = rev(unique(bigram)))) %>%
group_by(group) %>%
top_n(15) %>%
ungroup %>%
ggplot(aes(word, n, fill = group)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = NULL) +
facet_wrap(~group, ncol = 2, scales = "free") +
coord_flip()
M_graph <- M_counts %>%
filter(n > 70) %>%
graph_from_data_frame()
set.seed(2018)
a <- grid::arrow(type = "closed", length = unit(.08, "inches"))
ggraph(M_graph, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = a, end_cap = circle(.05, 'inches')) +
geom_node_point(color = "lightblue", size = 2) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void()
# Analyzing bigrams for Gen X group
G_united %>%
arrange(desc(n)) %>%
mutate(word = factor(bigram, levels = rev(unique(bigram)))) %>%
group_by(group) %>%
top_n(15) %>%
ungroup %>%
ggplot(aes(word, n, fill = group)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = NULL) +
facet_wrap(~group, ncol = 2, scales = "free") +
coord_flip()
G_graph <- G_counts %>%
filter(n > 15) %>%
graph_from_data_frame()
set.seed(2019)
a <- grid::arrow(type = "closed", length = unit(.08, "inches"))
ggraph(G_graph, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = a, end_cap = circle(.05, 'inches')) +
geom_node_point(color = "lightblue", size = 2) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void()
# Analyzing bigrams for Baby Boomer group
B_united %>%
arrange(desc(n)) %>%
mutate(word = factor(bigram, levels = rev(unique(bigram)))) %>%
group_by(group) %>%
top_n(15) %>%
ungroup %>%
ggplot(aes(word, n, fill = group)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = NULL) +
facet_wrap(~group, ncol = 2, scales = "free") +
coord_flip()
B_graph <- B_counts %>%
filter(n > 6) %>%
graph_from_data_frame()
set.seed(2020)
a <- grid::arrow(type = "closed", length = unit(.08, "inches"))
ggraph(B_graph, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = a, end_cap = circle(.05, 'inches')) +
geom_node_point(color = "lightblue", size = 2) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void()
# Analyzing bigrams for Silent group
S_united %>%
arrange(desc(n)) %>%
mutate(word = factor(bigram, levels = rev(unique(bigram)))) %>%
group_by(group) %>%
top_n(15) %>%
ungroup %>%
ggplot(aes(word, n, fill = group)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = NULL) +
facet_wrap(~group, ncol = 2, scales = "free") +
coord_flip()
S_graph <- S_counts %>%
filter(n > 2) %>%
graph_from_data_frame()
set.seed(2021)
a <- grid::arrow(type = "closed", length = unit(.08, "inches"))
ggraph(S_graph, layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
arrow = a, end_cap = circle(.05, 'inches')) +
geom_node_point(color = "lightblue", size = 2) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void()
# set working directory
setwd("/Users/shengwong/Documents/GitHub/Fall2018-Proj1-wsan5277yyyy/output")
# Install and load libraries
packages.used=c("tm", "wordcloud", "RColorBrewer", "dplyr", "tydytext",
"tidyverse","DT","scales","wordcloud2","gridExtra",
"ngram","tidyr","janeaustenr","wordcloud","igraph","ggraph","syuzhet")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
# Analyzing bigrams for Millennial group
M_united %>%
arrange(desc(n)) %>%
mutate(word = factor(bigram, levels = rev(unique(bigram)))) %>%
group_by(group) %>%
top_n(15) %>%
ungroup %>%
ggplot(aes(word, n, fill = group)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = NULL) +
facet_wrap(~group, ncol = 2, scales = "free") +
coord_flip()
# reshape our dataframe for plotting and comparing the four groups
frequency <- bind_rows(mutate(tidy_M, label = "17 to 37"),
mutate(tidy_G, label = "38 to 53"),
mutate(tidy_B, label = "54 to 72"),
mutate(tidy_S, label = "73 to 93")) %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(label, word) %>%
group_by(label) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(label, proportion) %>%
gather(label, proportion, `38 to 53`:`54 to 72`:`73 to 93`)
ggplot(frequency, aes(x = proportion, y = `17 to 37`, color = abs(`17 to 37` - proportion))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
facet_wrap(~label, ncol = 3) +
theme(legend.position="none") +
labs(y = "Millennial", x = NULL)
par(mfrow=c(1,4))
text.v <- gsub("[\\S]*http\\S+", " ", Millennial$cleaned_hm) #change DF here
text.v <- gsub("[^A-z'\"]", " ", text.v)
sentiment.values.v <- get_sentiment(text.v, method="syuzhet")
boxplot(sentiment.values.v, ylim=c(-5, 20), main="Millennial", ylab="Sentiment of Experiences")
text.v <- gsub("[\\S]*http\\S+", " ", Gen_X$cleaned_hm) #change DF here
text.v <- gsub("[^A-z'\"]", " ", text.v)
sentiment.values.v <- get_sentiment(text.v, method="syuzhet")
boxplot(sentiment.values.v, ylim=c(-5, 20), main="Gen X", ylab="Sentiment of Experiences")
text.v <- gsub("[\\S]*http\\S+", " ", Baby_Boomer$cleaned_hm) #change DF here
text.v <- gsub("[^A-z'\"]", " ", text.v)
sentiment.values.v <- get_sentiment(text.v, method="syuzhet")
boxplot(sentiment.values.v, ylim=c(-5, 20), main="Baby Boomer", ylab="Sentiment of Experiences")
text.v <- gsub("[\\S]*http\\S+", " ", Silent$cleaned_hm) #change DF here
text.v <- gsub("[^A-z'\"]", " ", text.v)
sentiment.values.v <- get_sentiment(text.v, method="syuzhet")
boxplot(sentiment.values.v, ylim=c(-5, 20), main="Silent", ylab="Sentiment of Experiences")
cor1 <- cor.test(data = frequency[frequency$label == "38 to 53",],
~ proportion + `17 to 37`)$conf.int[1]
cat("The word frequencies between Millennial and Gen X have corrlation",cor1)
cor2 <- cor.test(data = frequency[frequency$label == "54 to 72",],
~ proportion + `17 to 37`)$conf.int[1]
cat("The word frequencies between Millennial and Baby Boomer have corrlation",cor2)
cor3 <- cor.test(data = frequency[frequency$label == "73 to 93",],
~ proportion + `17 to 37`)$conf.int[1]
cat("The word frequencies between Millennial and Silent have corrlation",cor3)
# reshape our dataframe for plotting and comparing the four groups
frequency <- bind_rows(mutate(tidy_M, label = "17 to 37"),
mutate(tidy_G, label = "38 to 53"),
mutate(tidy_B, label = "54 to 72"),
mutate(tidy_S, label = "73 to 93")) %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(label, word) %>%
group_by(label) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(label, proportion) %>%
gather(label, proportion, `38 to 53`:`54 to 72`:`73 to 93`)
ggplot(frequency, aes(x = proportion, y = `17 to 37`, color = abs(`17 to 37` - proportion))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
facet_wrap(~label, ncol = 3) +
theme(legend.position="none") +
labs(y = "Millennial", x = NULL)
cor1 <- cor.test(data = frequency[frequency$label == "38 to 53",],
~ proportion + `17 to 37`)$conf.int[1]
cat("The word frequencies between Millennial and Gen X have corrlation",cor1)
cor2 <- cor.test(data = frequency[frequency$label == "54 to 72",],
~ proportion + `17 to 37`)$conf.int[1]
cat("The word frequencies between Millennial and Baby Boomer have corrlation",cor2)
cor3 <- cor.test(data = frequency[frequency$label == "73 to 93",],
~ proportion + `17 to 37`)$conf.int[1]
cat("The word frequencies between Millennial and Silent have corrlation",cor3)
# reshape our dataframe for plotting and comparing the three groups
frequency1 <- bind_rows(mutate(tidy_G, label = "38 to 53"),
mutate(tidy_B, label = "54 to 72"),
mutate(tidy_S, label = "73 to 93")) %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(label, word) %>%
group_by(label) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(label, proportion) %>%
gather(label, proportion, `54 to 72`:`73 to 93`)
ggplot(frequency1, aes(x = proportion, y = `38 to 53`, color = abs(`38 to 53` - proportion))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
facet_wrap(~label, ncol = 2) +
theme(legend.position="none") +
labs(y = "Gen X", x = NULL)
cor4 <- cor.test(data = frequency1[frequency1$label == "54 to 72",],
~ proportion + `38 to 53`)$conf.int[1]
cat("The word frequencies between Gen X and Baby Boomer have corrlation",cor4)
cor5 <- cor.test(data = frequency1[frequency1$label == "73 to 93",],
~ proportion + `38 to 53`)$conf.int[1]
cat("The word frequencies between Gen X and Silent have corrlation",cor5)
# reshape our dataframe for plotting and comparing the two groups
frequency2 <- bind_rows(mutate(tidy_B, label = "54 to 72"),
mutate(tidy_S, label = "73 to 93")) %>%
mutate(word = str_extract(word, "[a-z']+")) %>%
count(label, word) %>%
group_by(label) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(label, proportion) %>%
gather(label, proportion, `73 to 93`)
ggplot(frequency2, aes(x = proportion, y = `54 to 72`, color = abs(`54 to 72` - proportion))) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 2.5, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
facet_wrap(~label, ncol = 2) +
theme(legend.position="none") +
labs(y = "Baby Boomer", x = NULL)
cor6 <- cor.test(data = frequency2[frequency2$label == "73 to 93",],
~ proportion + `54 to 72`)$conf.int[1]
cat("The word frequencies between Baby Boomer and Silent have corrlation",cor6)
cor1 <- cor.test(data = frequency[frequency$label == "38 to 53",],
~ proportion + `17 to 37`)$conf.int[1]
cat("The word frequencies between Millennial and Gen X have corrlation",cor1)
cor2 <- cor.test(data = frequency[frequency$label == "54 to 72",],
~ proportion + `17 to 37`)$conf.int[1]
cat("The word frequencies between Millennial and Baby Boomer have corrlation",cor2)
cor3 <- cor.test(data = frequency[frequency$label == "73 to 93",],
~ proportion + `17 to 37`)$conf.int[1]
cat("The word frequencies between Millennial and Silent have corrlation",cor3)
cor4 <- cor.test(data = frequency1[frequency1$label == "54 to 72",],
~ proportion + `38 to 53`)$conf.int[1]
cat("The word frequencies between Gen X and Baby Boomer have corrlation",cor4)
cor5 <- cor.test(data = frequency1[frequency1$label == "73 to 93",],
~ proportion + `38 to 53`)$conf.int[1]
cat("The word frequencies between Gen X and Silent have corrlation",cor5)
cor6 <- cor.test(data = frequency2[frequency2$label == "73 to 93",],
~ proportion + `54 to 72`)$conf.int[1]
cat("The word frequencies between Baby Boomer and Silent have corrlation",cor6)
cor1 <- cor.test(data = frequency[frequency$label == "38 to 53",],
~ proportion + `17 to 37`)$conf.int[1]
cat("The word frequencies between Millennial and Gen X have corrlation",cor1)
cor2 <- cor.test(data = frequency[frequency$label == "54 to 72",],
~ proportion + `17 to 37`)$conf.int[1]
cat("The word frequencies between Millennial and Baby Boomer have corrlation",cor2)
cor3 <- cor.test(data = frequency[frequency$label == "73 to 93",],
~ proportion + `17 to 37`)$conf.int[1]
cat("The word frequencies between Millennial and Silent have corrlation",cor3)
cor4 <- cor.test(data = frequency1[frequency1$label == "54 to 72",],
~ proportion + `38 to 53`)$conf.int[1]
cat("The word frequencies between Gen X and Baby Boomer have corrlation",cor4)
cor5 <- cor.test(data = frequency1[frequency1$label == "73 to 93",],
~ proportion + `38 to 53`)$conf.int[1]
cat("The word frequencies between Gen X and Silent have corrlation",cor5)
cor6 <- cor.test(data = frequency2[frequency2$label == "73 to 93",],
~ proportion + `54 to 72`)$conf.int[1]
cat("The word frequencies between Baby Boomer and Silent have corrlation",cor6)
cor3 <- cor.test(data = frequency[frequency$label == "73 to 93",],
~ proportion + `17 to 37`)$conf.int[1]
cat("The word frequencies between Millennial and Silent have corrlation",cor3)
table(freq_category)
# Constructing matrix for heatmap and Dendrograms
x <- table(Millennial$predicted_category)
y <- table(Gen_X$predicted_category)
z <- table(Baby_Boomer$predicted_category)
w <- table(Silent$predicted_category)
coln <- c("achievement","affection","boonding","enjoy_the_moment","exercise","leisure","nature")
rown <- c("Millennial","Gen X","Baby Boomer","Silent")
freq_category <- matrix(c(x,y,z,w),nrow=4,byrow = TRUE)
rownames(freq_category) <- rown
colnames(freq_category) <- coln
#freq_category
# legend (Sunrise)
heatmap(freq_category,cexRow=1,cexCol = 0.6)
table()
# Constructing matrix for heatmap and Dendrograms
x <- table(Millennial$predicted_category)
y <- table(Gen_X$predicted_category)
z <- table(Baby_Boomer$predicted_category)
w <- table(Silent$predicted_category)
coln <- c("achievement","affection","boonding","enjoy_the_moment","exercise","leisure","nature")
rown <- c("Millennial","Gen X","Baby Boomer","Silent")
freq_category <- matrix(c(x,y,z,w),nrow=4,byrow = TRUE)
rownames(freq_category) <- rown
colnames(freq_category) <- coln
#freq_category
# legend (Sunrise)
heatmap(freq_category,cexRow=1,cexCol = 0.6)
